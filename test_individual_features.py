from feature_extractor import RussianFeatureExtractor


def test_specific_features():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–´–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 40)

    extractor = RussianFeatureExtractor(use_heavy_models=False)

    # –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤
    test_cases = [
        {
            'name': '–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç',
            'text': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –∂–∏–≤—É –≤ –±–æ–ª—å—à–æ–º –≥–æ—Ä–æ–¥–µ. –ó–¥–µ—Å—å –º–Ω–æ–≥–æ –ø–∞—Ä–∫–æ–≤ –∏ –º—É–∑–µ–µ–≤.',
            'question': '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.',
            'type': 1
        },
        {
            'name': '–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç',
            'text': '–ù–µ –∑–Ω–∞—é.',
            'question': '–ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ?',
            'type': 2
        },
        {
            'name': '–û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏',
            'text': '–Ø –∂–∏–≤—É —Ç–∞–º –≥–¥–µ –º–Ω–æ–≥–æ –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –∫—Ä–∞—Å–∏–≤–æ –Ω–æ –∏–Ω–æ–≥–¥–∞ —à—É–º–Ω–æ.',
            'question': '–ì–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?',
            'type': 1
        }
    ]

    for i, case in enumerate(test_cases, 1):
        print(f"\n{i}. {case['name']}:")
        print(f"   –¢–µ–∫—Å—Ç: '{case['text']}'")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        text_features = extractor.extract_enhanced_text_features(case['text'])
        grammar_features = extractor.extract_grammar_features(case['text'])
        discourse_features = extractor.extract_discourse_features(case['text'])

        print(f"   üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ: —Å–ª={text_features['word_count']}, —Ä={text_features['lexical_diversity']:.2f}")
        print(
            f"   üìö –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: –æ—à={grammar_features['grammar_error_ratio']:.2f}, –ø–æ–ª–Ω={grammar_features['sentence_completeness']:.2f}")
        print(f"   üí¨ –î–∏—Å–∫—É—Ä—Å: –ø—Ä–∏–≤={discourse_features['has_greeting']}, –≤–æ–ø—Ä={discourse_features['has_questions']}")


# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
if __name__ == "__main__":
    test_specific_features()