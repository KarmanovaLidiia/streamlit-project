# src/make_training_table.py
from __future__ import annotations
from pathlib import Path
import pandas as pd

from src.data_cleaning import prepare_dataframe
from src.features import build_baseline_features          # –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (len, ttr, punctuation, etc.)
from src.semantic_features import add_semantic_similarity # semantic_sim (ruSBERT + cache)
from src.features_q4 import add_q4_features               # rule-based —Ñ–∏—á–∏ –¥–ª—è Q4

RAW = Path("data/raw/–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–µ–π—Å–∞.csv")
CLEAN = Path("data/processed/clean_data.csv")
OUT = Path("data/processed/features_with_semantics_q4.csv")

def read_input() -> pd.DataFrame:
    # —Å—Ç–∞—Ä–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—É –∂–µ ¬´—É—Å—Ç–æ–π—á–∏–≤—É—é¬ª –∑–∞–≥—Ä—É–∑–∫—É, —á—Ç–æ –∏ –≤ predict
    tries = [
        ("utf-8-sig", ";"),
        ("utf-8", ";"),
        ("utf-8-sig", ","),
        ("utf-8", ","),
        ("utf-8-sig", None),
        ("utf-8", None),
    ]
    last_err = None
    for enc, sep in tries:
        try:
            if sep is None:
                df = pd.read_csv(RAW, encoding=enc, sep=None, engine="python")
            else:
                df = pd.read_csv(RAW, encoding=enc, sep=sep)
            print(f"[i] CSV –ø—Ä–æ—á–∏—Ç–∞–Ω —Å encoding='{enc}', sep='{sep or 'auto'}'")
            return df
        except Exception as e:
            last_err = e
    raise last_err

def main():
    # 1) —á–∏—Ç–∞–µ–º —Å—ã—Ä–æ–π CSV ‚Üí –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ö–µ–º–µ
    if CLEAN.exists():
        print(f"[i] –ò—Å–ø–æ–ª—å–∑—É—é —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π clean: {CLEAN}")
        df_clean = pd.read_csv(CLEAN, encoding="utf-8-sig")
    else:
        df_raw = read_input()
        df_clean = prepare_dataframe(df_raw)
        CLEAN.parent.mkdir(parents=True, exist_ok=True)
        df_clean.to_csv(CLEAN, index=False, encoding="utf-8-sig")
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω clean: {CLEAN}")

    # 2) –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    feats = build_baseline_features(df_clean)

    # 3) —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å (–∫—ç—à ruSBERT)
    print("üîπ –í—ã—á–∏—Å–ª—è–µ–º semantic_sim (ruSBERT + cache)...")
    feats = add_semantic_similarity(feats, batch_size=64)

    # 4) rule-based –ø—Ä–∏–∑–Ω–∞–∫–∏ Q4
    print("üîπ –î–æ–±–∞–≤–ª—è—é rule-based –ø—Ä–∏–∑–Ω–∞–∫–∏ Q4...")
    feats = add_q4_features(feats)

    # 5) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–∞—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
    OUT.parent.mkdir(parents=True, exist_ok=True)
    feats.to_csv(OUT, index=False, encoding="utf-8-sig")
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {OUT}")
    print("–ü—Ä–µ–≤—å—é:")
    print(feats.head())

if __name__ == "__main__":
    main()
