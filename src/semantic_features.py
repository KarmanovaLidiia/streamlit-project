# src/semantic_features.py
from __future__ import annotations
from functools import lru_cache
import numpy as np
import pandas as pd
from sentence_transformers import SentenceTransformer

from src.semantic_cache import embed_with_cache

_MODEL_NAME = "ai-forever/sbert_large_nlu_ru"


@lru_cache(maxsize=1)
def _load_model() -> SentenceTransformer:
    """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)."""
    return SentenceTransformer(_MODEL_NAME)


def add_semantic_similarity(
    df: pd.DataFrame,
    batch_size: int = 16,      # –º–µ–Ω—å—à–µ –±–∞—Ç—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ø–∏—Å–∞–ª—Å—è –∫—ç—à
    verbose: bool = True,
) -> pd.DataFrame:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É 'semantic_sim' ‚Äî –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.
    –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ embed_with_cache (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã),
    –ø–æ—ç—Ç–æ–º—É cos_sim == dot(a, q).
    """
    out = df.copy()

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    for col in ("question_text", "answer_text"):
        if col not in out.columns:
            out[col] = ""

    if len(out) == 0:
        out["semantic_sim"] = np.array([], dtype=np.float32)
        return out

    model = _load_model()

    q_texts = out["question_text"].fillna("").astype(str).tolist()
    a_texts = out["answer_text"].fillna("").astype(str).tolist()

    if verbose:
        print("üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–≤–æ–ø—Ä–æ—Å—ã)...")
    q_emb = embed_with_cache(q_texts, model, batch_size=batch_size, verbose=verbose)  # (N, D) float32

    if verbose:
        print("üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–æ—Ç–≤–µ—Ç—ã)...")
    a_emb = embed_with_cache(a_texts, model, batch_size=batch_size, verbose=verbose)  # (N, D) float32

    # –∫–æ—Å–∏–Ω—É—Å = —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–≤–µ–∫—Ç–æ—Ä—ã —É–∂–µ –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –≤ embed_with_cache)
    sims = (a_emb * q_emb).sum(axis=1).astype(np.float32)
    np.clip(sims, -1.0, 1.0, out=sims)

    out["semantic_sim"] = sims
    return out
