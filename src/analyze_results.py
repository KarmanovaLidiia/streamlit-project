# src/analyze_results.py
from __future__ import annotations
from pathlib import Path
import argparse
import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def _read_csv_safely(path: Path) -> pd.DataFrame:
    """
    –£—Å—Ç–æ–π—á–∏–≤–æ–µ —á—Ç–µ–Ω–∏–µ CSV: –ø—Ä–æ–±—É–µ–º ; , –∏ –∞–≤—Ç–æ. –í—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ç, –≥–¥–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å >= 5 –∫–æ–ª–æ–Ω–æ–∫.
    """
    tries = [
        ("utf-8-sig", ","),   # –°–ù–ê–ß–ê–õ–ê –ö–û–ú–ú–ê ‚Äî —á–∞—â–µ –¥–ª—è –Ω–∞—à–∏—Ö predicted.csv
        ("utf-8-sig", ";"),
        ("utf-8", ","),
        ("utf-8", ";"),
        ("utf-8-sig", None),
        ("utf-8", None),
    ]
    last_err = None
    best_df = None
    best_info = None

    for enc, sep in tries:
        try:
            if sep is None:
                df = pd.read_csv(path, encoding=enc, sep=None, engine="python")
                got = f"auto"
            else:
                df = pd.read_csv(path, encoding=enc, sep=sep)
                got = sep
            # —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç >= 5 –∫–æ–ª–æ–Ω–æ–∫
            if df.shape[1] >= 5:
                print(f"[i] CSV –ø—Ä–æ—á–∏—Ç–∞–Ω —Å encoding='{enc}', sep='{got}'")
                return df
            # –∑–∞–ø–æ–º–Ω–∏–º —Å–∞–º—ã–π ¬´–ª—É—á—à–∏–π¬ª (–ø–æ —á–∏—Å–ª—É –∫–æ–ª–æ–Ω–æ–∫), –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –ø—Ä–æ–π–¥—ë—Ç –ø–æ—Ä–æ–≥
            if best_df is None or df.shape[1] > best_df.shape[1]:
                best_df, best_info = df, (enc, got)
        except Exception as e:
            last_err = e

    if best_df is not None:
        enc, got = best_info
        print(f"[!] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–¥—ë–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –≤–∑—è—Ç –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç encoding='{enc}', sep='{got}' (cols={best_df.shape[1]})")
        return best_df

    raise last_err if last_err else RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV")

def _resolve_col(df: pd.DataFrame, candidates) -> str:
    for c in candidates:
        if c in df.columns:
            return c
    raise KeyError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {candidates}\n–ò–º–µ—é—â–∏–µ—Å—è –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")

def mae(y_true: np.ndarray, y_pred: np.ndarray) -> float:
    return float(np.mean(np.abs(y_true - y_pred)))

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--input", type=str, default="data/processed/predicted.csv", help="–ü—É—Ç—å –∫ CSV —Å –∫–æ–ª–æ–Ω–∫–æ–π pred_score")
    args = ap.parse_args()

    in_path = Path(args.input)
    if not in_path.exists():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏: {in_path}")
        sys.exit(1)

    df = _read_csv_safely(in_path)

    # –ö–æ–ª–æ–Ω–∫–∏
    y_col = _resolve_col(df, ["–û—Ü–µ–Ω–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞", "–æ—Ü–µ–Ω–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞", "score", "y", "target"])
    p_col = _resolve_col(df, ["pred_score", "pred", "prediction"])

    # –ö–æ–ª–æ–Ω–∫–∞ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞: –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    if "‚Ññ –≤–æ–ø—Ä–æ—Å–∞" in df.columns:
        q_col = "‚Ññ –≤–æ–ø—Ä–æ—Å–∞"
    else:
        q_col = _resolve_col(df, ["question_number", "q", "–Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞", "‚Ññ  –≤–æ–ø—Ä–æ—Å–∞"])

    # –ß–∏—Å–ª–æ–≤—ã–µ –º–∞—Å—Å–∏–≤—ã
    y = pd.to_numeric(df[y_col], errors="coerce").to_numpy()
    p = pd.to_numeric(df[p_col], errors="coerce").to_numpy()

    # –û–±—â–∞—è MAE
    m_all = mae(y, p)
    print(f"MAE (–≤—Å—è –≤—ã–±–æ—Ä–∫–∞): {m_all:.3f}\n")

    # MAE –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
    g = (df[[q_col]].copy())
    g["y"] = y
    g["p"] = p
    mae_by_q = (
        g.groupby(q_col, as_index=True)
         .apply(lambda s: mae(s["y"].to_numpy(), s["p"].to_numpy()))
         .to_frame("MAE")
    )
    print("MAE –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º:")
    print(mae_by_q)
    out_dir = Path("reports"); out_dir.mkdir(parents=True, exist_ok=True)
    mae_by_q.to_csv(out_dir / "metrics_summary.csv", encoding="utf-8-sig")
    print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {out_dir / 'metrics_summary.csv'}")

    # –ì—Ä–∞—Ñ–∏–∫–∏
    # 1) –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—à–∏–±–æ–∫
    err = np.abs(y - p)
    plt.figure()
    plt.hist(err[~np.isnan(err)], bins=30)
    plt.title("Absolute Error Histogram")
    plt.xlabel("|y - pred|"); plt.ylabel("count")
    plt.tight_layout(); plt.savefig(out_dir / "error_hist.png"); plt.close()
    print(f"üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {out_dir / 'error_hist.png'}")

    # 2) mae_by_q –±–∞—Ä–ø–ª–æ—Ç
    plt.figure()
    mae_by_q["MAE"].plot(kind="bar")
    plt.ylabel("MAE"); plt.title("MAE by question")
    plt.tight_layout(); plt.savefig(out_dir / "mae_by_q.png"); plt.close()
    print(f"üìä MAE –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º: {out_dir / 'mae_by_q.png'}")

    # 3) scatter
    plt.figure()
    plt.scatter(y, p, alpha=0.3)
    plt.xlabel("true"); plt.ylabel("pred"); plt.title("Pred vs True")
    plt.tight_layout(); plt.savefig(out_dir / "pred_vs_true.png"); plt.close()
    print(f"üìä Scatter: {out_dir / 'pred_vs_true.png'}")

if __name__ == "__main__":
    main()
