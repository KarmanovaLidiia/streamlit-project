# app.py
import io
import os
from pathlib import Path

import pandas as pd
import streamlit as st

# –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
os.environ.setdefault("FAST_MODE", "1")

# –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
from src.predict import pipeline_infer

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="–†—É—Å—Å–∫–∏–π –∫–∞–∫ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π ‚Äì –∞–≤—Ç–æ–æ—Ü–µ–Ω–∫–∞", layout="centered")

st.title("–ê–≤—Ç–æ–æ—Ü–µ–Ω–∫–∞ —É—Å—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (RFL ‚Ä¢ CatBoost + ruSBERT)")
st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ pred_score –∏ pred_score_rounded.")

# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–µ ---
with st.expander("–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ CSV", expanded=False):
    st.markdown(
        """
        –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:
        - **‚Ññ –≤–æ–ø—Ä–æ—Å–∞** (1..4)
        - **–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞**
        - **–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞**
        - *(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)* **–û—Ü–µ–Ω–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞** ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å, –µ—ë –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, –¥–æ–±–∞–≤–∏–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä—è–¥–æ–º.  

        –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Äî `;`, –∫–æ–¥–∏—Ä–æ–≤–∫–∞ ‚Äî UTF-8 (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è).
        """
    )

# --- –ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ CSV ---
with st.expander("üìÑ –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω CSV"):
    demo = pd.DataFrame({
        "‚Ññ –≤–æ–ø—Ä–æ—Å–∞": [1, 2],
        "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞": ["<p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å...</p>", "<p>–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –¥–µ–Ω—å...</p>"],
        "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞": ["–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø—Ä–∏–µ—Ö–∞–ª...", "–ú–æ–π –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å..."],
        "–û—Ü–µ–Ω–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞": [None, None],
    })
    st.dataframe(demo)
    buf_tmpl = io.BytesIO()
    demo.to_csv(buf_tmpl, index=False, sep=";", encoding="utf-8-sig")
    st.download_button("‚¨á –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω CSV", buf_tmpl.getvalue(), "template.csv", "text/csv")

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ ---
required = ["‚Ññ –≤–æ–ø—Ä–æ—Å–∞", "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"]
aliases = {
    "–Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞": "‚Ññ –≤–æ–ø—Ä–æ—Å–∞",
    "–≤–æ–ø—Ä–æ—Å": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
    "—Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
    "—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞",
    "—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞",
    "–æ—Ç–≤–µ—Ç": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞",
}


def load_and_normalize_csv(raw_bytes: bytes) -> pd.DataFrame:
    import io
    for sep in [";", ",", "\t"]:
        try:
            df = pd.read_csv(io.BytesIO(raw_bytes), sep=sep, engine="python")

            # —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã Git-–∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            if not df.empty and str(df.columns[0]).startswith("<<<"):
                text = raw_bytes.decode("utf-8", errors="ignore")
                lines = [ln for ln in text.splitlines() if not ln.startswith(("<<<", "===", ">>>"))]
                df = pd.read_csv(io.StringIO("\n".join(lines)), sep=sep, engine="python")

            # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º—ë–Ω –∫–æ–ª–æ–Ω–æ–∫
            rename_map = {}
            for c in list(df.columns):
                key = str(c).strip().lower()
                if key in aliases:
                    rename_map[c] = aliases[key]
            if rename_map:
                df = df.rename(columns=rename_map)

            return df
        except Exception:
            continue
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (';' –∏–ª–∏ ',') –∏ –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8.")


# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV", type=["csv"])
slow = st.toggle("–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º", value=False, help="–í—ã–∫–ª—é—á–∏—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏ (—Ç–æ—á–Ω–æ—Å—Ç—å ‚âà –ø—Ä–µ–∂–Ω—è—è).")
run = st.button("–ü–æ—Å—á–∏—Ç–∞—Ç—å")

if uploaded and run:
    try:
        raw = uploaded.read()
        df_in = load_and_normalize_csv(raw)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        missing = [c for c in required if c not in df_in.columns]
        if missing:
            st.error(f"‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: {missing}. –ü—Ä–æ–≤–µ—Ä—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ';'.")
            st.dataframe(df_in.head())
            st.stop()

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
        tmp_in = Path("data/api_tmp/tmp_input.csv")
        tmp_in.parent.mkdir(parents=True, exist_ok=True)
        df_in.to_csv(tmp_in, index=False, sep=";", encoding="utf-8-sig")

        # —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏
        os.environ["FAST_MODE"] = "0" if slow else "1"

        tmp_out = Path("data/api_tmp/tmp_output.csv")
        with st.spinner("–°—á–∏—Ç–∞–µ–º..."):
            pipeline_infer(tmp_in, tmp_out)

        df_out = pd.read_csv(tmp_out, sep=";", encoding="utf-8-sig")
        st.success("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        st.dataframe(df_out.head(20), use_container_width=True)

        buf = io.BytesIO()
        df_out.to_csv(buf, index=False, sep=";", encoding="utf-8-sig")
        st.download_button("‚¨á –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (CSV)", data=buf.getvalue(), file_name="predicted.csv", mime="text/csv")
    except Exception as e:
        st.exception(e)

# --- –ü–æ–¥–≤–∞–ª ---
st.markdown("---")
st.caption("–ú–æ–¥–µ–ª—å: CatBoost Q1..Q4 + ruSBERT. –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º = FAST_MODE=1.")
