import os
import json
import time
import threading
from pathlib import Path

import pandas as pd
import streamlit as st

from src.predict import pipeline_infer

# --------------------------- UI / PAGE ---------------------------
st.set_page_config(
    page_title="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞",
    layout="centered"
)

st.title("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞")
st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∫–∞–∫ –≤ –∑–∞–¥–∞–Ω–∏–∏. –ù–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–æ–π `pred_score`.")

# –û–ø—Ü–∏–∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
with st.expander("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞", expanded=True):
    fast_mode = st.checkbox(
        "–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥–æ–Ω (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)", value=True,
        help="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ N —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–π–ø–ª–∞–π–Ω."
    )
    row_limit = st.number_input(
        "–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤–∑—è—Ç—å –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ", min_value=100, max_value=100_000,
        value=2_000, step=100
    )
    st.caption(
        "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –Ω–µ –º–µ–Ω—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚Äî "
        "–æ–Ω –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ—Ç —Å—ç–º–ø–ª –ø–µ—Ä–≤—ã—Ö N —Å—Ç—Ä–æ–∫."
    )

uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV", type=["csv"])
run = st.button("–û—Ü–µ–Ω–∏—Ç—å", type="primary", disabled=uploaded is None)

# --------------------------- RUNTIME PATHS ---------------------------
TMP_DIR_IN = Path("data/raw")
TMP_DIR_OUT = Path("data/processed")
TMP_DIR_IN.mkdir(parents=True, exist_ok=True)
TMP_DIR_OUT.mkdir(parents=True, exist_ok=True)

TMP_IN = TMP_DIR_IN / "tmp_input.csv"
TMP_OUT = TMP_DIR_OUT / "tmp_output.csv"

# –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –µ–≥–æ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å src/predict.py
PROGRESS_FILE = Path("/tmp/progress.json")
os.environ["PROGRESS_FILE"] = str(PROGRESS_FILE)

# –í–µ—Å–∞ —Å—Ç–∞–¥–∏–π –¥–ª—è –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Å—É–º–º–∞ ‚âà 100)
STAGE_WEIGHTS = {
    "–∑–∞–≥—Ä—É–∑–∫–∞ CSV": 2,
    "–æ—á–∏—Å—Ç–∫–∞": 6,
    "–±–∞–∑–æ–≤—ã–µ —Ñ–∏—á–∏": 6,
    "—Å–µ–º–∞–Ω—Ç–∏–∫–∞": 55,        # —Å–∞–º—ã–π —Ç—è–∂–µ–ª—ã–π —à–∞–≥
    "q4-—Ñ–∏—á–∏": 10,
    "on-topic": 2,
    "–∏–Ω—Ñ–µ—Ä–µ–Ω—Å CatBoost": 15,
    "–æ–±—ä—è—Å–Ω–µ–Ω–∏—è": 3,
    "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ": 1,
    "–≥–æ—Ç–æ–≤–æ": 0,
}

def _save_bytes_to(tmp_path: Path, raw: bytes):
    tmp_path.parent.mkdir(parents=True, exist_ok=True)
    with open(tmp_path, "wb") as f:
        f.write(raw)

def _read_any_csv(path: Path, nrows: int | None = None) -> pd.DataFrame:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ CSV —Å –∞–≤—Ç–æ-–¥–µ—Ç–µ–∫—Ç–æ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è."""
    try:
        return pd.read_csv(path, nrows=nrows, encoding="utf-8-sig", sep=None, engine="python")
    except Exception:
        return pd.read_csv(path, nrows=nrows, encoding="utf-8", sep=None, engine="python")

def _write_csv(df: pd.DataFrame, path: Path):
    df.to_csv(path, index=False, encoding="utf-8-sig")

def _calc_total_progress(cur_stage: str, current: int, total: int) -> float:
    """–ü–µ—Ä–µ–≤–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞–¥–∏–∏ –≤ –æ–±—â–∏–π % —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤."""
    # —Å—É–º–º–∞ –≤–µ—Å–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∞–¥–∏–π
    stages = list(STAGE_WEIGHTS.keys())
    done_weight = 0.0
    for s in stages:
        if s == cur_stage:
            break
        done_weight += STAGE_WEIGHTS.get(s, 0)
    stage_weight = STAGE_WEIGHTS.get(cur_stage, 0)
    frac = 0.0
    if total and total > 0:
        frac = min(max(current / float(total), 0.0), 1.0)
    return (done_weight + stage_weight * frac) / sum(STAGE_WEIGHTS.values())

def _read_progress():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        if PROGRESS_FILE.exists():
            with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception:
        pass
    return {"stage": "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "current": 0, "total": 1, "note": ""}

# --------------------------- MAIN ---------------------------
if uploaded and run:
    start_time = time.time()
    # –æ—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    try:
        if PROGRESS_FILE.exists():
            PROGRESS_FILE.unlink(missing_ok=True)
    except Exception:
        pass

    with st.status("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É...", expanded=True) as status:
        st.write("–°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª‚Ä¶")
        raw_bytes = uploaded.read()
        _save_bytes_to(TMP_IN, raw_bytes)

        # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥–æ–Ω ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º TMP_IN –ø–µ—Ä–≤—ã–º–∏ N —Å—Ç—Ä–æ–∫–∞–º–∏
        if fast_mode:
            st.write(f"–ß–∏—Ç–∞—é –ø–µ—Ä–≤—ã–µ {row_limit} —Å—Ç—Ä–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞‚Ä¶")
            try:
                df_head = _read_any_csv(TMP_IN, nrows=int(row_limit))
                _write_csv(df_head, TMP_IN)
                st.success(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Å—ç–º–ø–ª –∏–∑ {len(df_head):,} —Å—Ç—Ä–æ–∫.")
            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Å—ç–º–ø–ª: {e}. –ü–æ–π–¥—É –ø–æ –ø–æ–ª–Ω–æ–º—É —Ñ–∞–π–ª—É.")

        # >>> –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞ <<<
        if fast_mode:
            os.environ["FAST_ROW_LIMIT"] = str(int(row_limit))
            os.environ["DISABLE_EXPLANATIONS"] = "1"
        else:
            os.environ.pop("FAST_ROW_LIMIT", None)
            os.environ.pop("DISABLE_EXPLANATIONS", None)
        os.environ["CHUNK_SIZE"] = "500"
        os.environ["PROGRESS_FILE"] = str(PROGRESS_FILE)

        status.update(label="üöÄ –ó–∞–ø—É—Å–∫–∞—é –∏–Ω—Ñ–µ—Ä–µ–Ω—Å‚Ä¶")

    # --- –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
    err_box = st.empty()
    prog_bar = st.progress(0, text="–°—Ç–∞—Ä—Ç...")
    stage_text = st.empty()

    def _worker():
        try:
            pipeline_infer(TMP_IN, TMP_OUT)
        except Exception as e:
            # —Å–∫–ª–∞–¥—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ—Ç–æ–±—Ä–∞–∑–∏–ª
            with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
                json.dump({"stage": "error", "current": 0, "total": 1, "note": str(e)}, f)

    t = threading.Thread(target=_worker, daemon=True)
    t.start()

    # --- –û–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Ç–æ–∫ ---
    while t.is_alive():
        info = _read_progress()
        if info.get("stage") == "error":
            err_box.error(f"–í–æ –≤—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {info.get('note')}")
            st.stop()

        stage = info.get("stage", "—Ä–∞–±–æ—Ç–∞")
        cur = int(info.get("current", 0))
        tot = max(int(info.get("total", 1)), 1)
        note = info.get("note", "")

        frac = _calc_total_progress(stage, cur, tot)
        prog_bar.progress(int(frac * 100), text=f"{stage} ‚Ä¢ {cur}/{tot} {note}")
        stage_text.write(f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è: **{stage}** &nbsp;&nbsp; {cur}/{tot} {note}")
        time.sleep(0.8)

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–ø–¥–µ–π—Ç (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏)
    info = _read_progress()
    if info.get("stage") == "error":
        err_box.error(f"–í–æ –≤—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {info.get('note')}")
        st.stop()
    prog_bar.progress(100, text="–ì–æ—Ç–æ–≤–æ ‚úÖ")

    # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    duration = int(time.time() - start_time)
    try:
        df_res = _read_any_csv(TMP_OUT)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç `{TMP_OUT}`: {e}")
        st.stop()

    st.success(f"–ì–æ—Ç–æ–≤–æ –∑–∞ {duration} —Å–µ–∫. –ù–∏–∂–µ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
    st.dataframe(df_res.head(20), use_container_width=True)

    st.download_button(
        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        data=TMP_OUT.read_bytes(),
        file_name="predicted.csv",
        mime="text/csv",
        type="primary"
    )

    with st.expander("‚ÑπÔ∏è –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —É—Å–∫–æ—Ä–µ–Ω–∏—é"):
        st.markdown(
            "- –î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ **–±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥–æ–Ω** ‚Äî –±—ã—Å—Ç—Ä–µ–µ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
            "- –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö CSV –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –∂–µ–ª–µ–∑–µ.\n"
            "- –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—â—ë –±—ã—Å—Ç—Ä–µ–µ: –∑–∞—Ä–∞–Ω–µ–µ –Ω–∞—Ä–µ–∂—å—Ç–µ –≤—Ö–æ–¥–Ω–æ–π CSV –Ω–∞ —á–∞—Å—Ç–∏ –∏ –ø—Ä–æ–≥–æ–Ω—è–π—Ç–µ –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ."
        )
