# -*- coding: utf-8 -*-
import streamlit as st
from transformers import pipeline
import os

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
os.environ["HF_HUB_DISABLE_SYMLINKS_WARNING"] = "1"

# –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
st.set_page_config(
    page_title="AI Model Demo",
    page_icon="ü§ñ",
    layout="wide"
)

# –ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.title("ü§ñ –î–µ–º–æ AI –ú–æ–¥–µ–ª–µ–π")
st.write("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏
task = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:",
    ["–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞", "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"]
)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
if task == "–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏":
    st.header("üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞")
    text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:", "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —ç—Ç–æ–º—É!")

    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."):
            try:
                classifier = pipeline("sentiment-analysis")
                result = classifier(text)[0]
                st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result['label']}")
                st.info(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['score']:.4f}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")

elif task == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞":
    st.header("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")
    prompt = st.text_area("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞:", "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")

    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º..."):
            try:
                generator = pipeline("text-generation", model="gpt2")
                result = generator(prompt, max_length=100, num_return_sequences=1)
                st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç:**")
                st.write(result[0]['generated_text'])
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")

elif task == "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":
    st.header("üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")
    text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:", "–≠—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç!")

    if st.button("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å"):
        with st.spinner("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º..."):
            try:
                classifier = pipeline("text-classification")
                results = classifier(text)
                st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**")
                for result in results:
                    st.write(f"- {result['label']}: {result['score']:.4f}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–∏–∑—É
st.sidebar.markdown("---")
st.sidebar.info("–ü—Ä–æ—Å—Ç–æ–µ –¥–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π")