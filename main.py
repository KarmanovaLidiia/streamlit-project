import streamlit as st
import sys
import subprocess
import os

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ transformers —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from transformers import pipeline, AutoModel, AutoTokenizer

    TRANSFORMERS_AVAILABLE = True
except ImportError as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ transformers: {e}")
    st.info("–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ transformers...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "transformers", "torch", "tokenizers"])
        from transformers import pipeline, AutoModel, AutoTokenizer

        TRANSFORMERS_AVAILABLE = True
        st.success("Transformers —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except:
        TRANSFORMERS_AVAILABLE = False
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å transformers. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: pip install transformers torch")

# –ò–º–ø–æ—Ä—Ç –¥—Ä—É–≥–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    import pandas as pd

    PANDAS_AVAILABLE = True
except ImportError:
    PANDAS_AVAILABLE = False

try:
    import torch

    TORCH_AVAILABLE = True
except ImportError:
    TORCH_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Hugging Face Model Demo",
    page_icon="ü§ó",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("ü§ó Hugging Face Model in Streamlit")
st.write("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–µ–π –∏–∑ Hugging Face Hub")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
if not TRANSFORMERS_AVAILABLE:
    st.error("""
    **–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ transformers –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!**

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –≤—ã–ø–æ–ª–Ω–∏–≤ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:
    ```
    pip install transformers torch tokenizers
    ```
    """)
    st.stop()

if not TORCH_AVAILABLE:
    st.warning("PyTorch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
task_type = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
    ["text-classification", "sentiment-analysis", "text-generation", "translation", "question-answering"]
)

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≥–∫–∏–µ –º–æ–¥–µ–ª–∏)
model_options = {
    "text-classification": "distilbert-base-uncased-finetuned-sst-2-english",
    "text-generation": "gpt2",
    "sentiment-analysis": "distilbert-base-uncased-finetuned-sst-2-english",
    "translation": "t5-small",
    "question-answering": "distilbert-base-cased-distilled-squad"
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
st.sidebar.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö")
for task, model in model_options.items():
    st.sidebar.write(f"**{task}**: `{model}`")


# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏
@st.cache_resource(show_spinner=False)
def load_model(task, model_name):
    try:
        st.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: {model_name}")
        if task == "translation":
            return pipeline(task, model=model_name, tokenizer=model_name)
        else:
            return pipeline(task, model=model_name)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
        return None


# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if task_type == "text-classification":
    st.header("üìä –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")
    st.write("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    text_input = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
        "I love this product! It's amazing!",
        height=100
    )

    if st.button("üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏..."):
            classifier = load_model("text-classification", model_options["text-classification"])

        if classifier:
            try:
                results = classifier(text_input)
                st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")

                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                for i, result in enumerate(results):
                    score_percent = result['score'] * 100
                    st.write(f"**{i + 1}. {result['label']}**")
                    st.progress(float(result['score']))
                    st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: **{score_percent:.2f}%**")
                    st.markdown("---")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")

elif task_type == "sentiment-analysis":
    st.header("üòä –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    st.write("–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É —Ç–µ–∫—Å—Ç–∞")

    text_input = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:",
        "I'm so happy today! Everything is going well.",
        height=100
    )

    if st.button("üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏..."):
            analyzer = load_model("sentiment-analysis", model_options["sentiment-analysis"])

        if analyzer:
            try:
                results = analyzer(text_input)
                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")

                for result in results:
                    score = result['score']
                    label = result['label']

                    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if "POSITIVE" in label.upper():
                        st.success(f"üòä –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫")
                    elif "NEGATIVE" in label.upper():
                        st.error(f"üòû –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫")
                    else:
                        st.info(f"üòê {label}")

                    st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{score:.4f}")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")

elif task_type == "text-generation":
    st.header("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")
    st.write("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞")

    prompt = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç:",
        "The future of artificial intelligence",
        height=100
    )

    col1, col2 = st.columns(2)
    with col1:
        max_length = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞", 50, 300, 100)
    with col2:
        temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.1, 1.0, 0.7)

    if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", type="primary"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç..."):
            generator = load_model("text-generation", model_options["text-generation"])

        if generator:
            try:
                results = generator(
                    prompt,
                    max_length=max_length,
                    num_return_sequences=1,
                    temperature=temperature,
                    do_sample=True
                )
                st.subheader("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
                st.write(results[0]['generated_text'])

                st.info("üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –ü–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

elif task_type == "translation":
    st.header("üåê –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
    st.write("–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏")

    text_to_translate = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
        "Hello, how are you? I hope you have a great day!",
        height=100
    )

    if st.button("üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", type="primary"):
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞..."):
            translator = load_model("translation", model_options["translation"])

        if translator:
            try:
                # –î–ª—è T5 –º–æ–¥–µ–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
                if "t5" in model_options["translation"]:
                    text_to_translate = "translate English to French: " + text_to_translate

                result = translator(text_to_translate)
                st.subheader("üìñ –ü–µ—Ä–µ–≤–æ–¥:")
                st.success(result[0]['translation_text'])

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")

elif task_type == "question-answering":
    st.header("‚ùì –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç")
    st.write("–ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

    context = st.text_area(
        "–ö–æ–Ω—Ç–µ–∫—Å—Ç:",
        "The Eiffel Tower is located in Paris, France. It was built in 1889 and is one of the most famous landmarks in the world. The tower is 330 meters tall and was designed by Gustave Eiffel.",
        height=150
    )
    question = st.text_input("–í–æ–ø—Ä–æ—Å:", "Where is the Eiffel Tower located?")

    if st.button("üîé –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç", type="primary"):
        with st.spinner("–ò—â–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ..."):
            qa_pipeline = load_model("question-answering", model_options["question-answering"])

        if qa_pipeline:
            try:
                result = qa_pipeline(question=question, context=context)
                st.subheader("üí° –û—Ç–≤–µ—Ç:")
                st.success(f"**{result['answer']}**")

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{result['score']:.4f}")
                with col2:
                    start_pos = result['start']
                    end_pos = result['end']
                    st.metric("–ü–æ–∑–∏—Ü–∏—è –≤ —Ç–µ–∫—Å—Ç–µ", f"{start_pos}-{end_pos}")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
st.sidebar.markdown("---")
st.sidebar.info(
    """
    **üí° –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:**

    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π 
    Hugging Face —Å Streamlit.

    –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º 
    –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏ –∫—ç—à–∏—Ä—É—é—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

    **‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –º–æ–∂–µ—Ç 
    –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
    """
)

# –°—Ç–∞—Ç—É—Å –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤ —Ñ—É—Ç–µ—Ä–µ
st.sidebar.markdown("---")
st.sidebar.markdown("### üìä –°—Ç–∞—Ç—É—Å –±–∏–±–ª–∏–æ—Ç–µ–∫")
st.sidebar.write(f"ü§ó Transformers: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if TRANSFORMERS_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
st.sidebar.write(f"üî• PyTorch: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if TORCH_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
st.sidebar.write(f"üêº Pandas: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if PANDAS_AVAILABLE else '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–µ–ø–æ–ª–∞–¥–æ–∫
if not TRANSFORMERS_AVAILABLE:
    st.sidebar.markdown("---")
    st.sidebar.error("""
    **–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫:**

    –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:
    ```bash
    pip install transformers torch tokenizers
    ```
    """)