import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter
import numpy as np
import os
import warnings

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
plt.style.use('default')
plt.rcParams['font.family'] = 'DejaVu Sans'


def load_and_analyze_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    file_path = 'test_data.csv'

    try:
        df = pd.read_csv(file_path, encoding='utf-8', delimiter=';')
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª test_data.csv –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
        return None

    print("=" * 60)
    print("–¢–ï–°–¢–û–í–´–ô –ê–ù–ê–õ–ò–ó AI-–û–¶–ï–ù–û–ö")
    print("=" * 60)

    print(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
    print(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
    print(f"\n–ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:")
    print(df.head(3))

    return df


def basic_statistics(df):
    """–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""

    print("\n" + "=" * 40)
    print("–ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 40)

    print("AI –æ—Ü–µ–Ω–∫–∏ (pred_score):")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ: {df['pred_score'].mean():.3f}")
    print(f"  –ú–µ–¥–∏–∞–Ω–∞: {df['pred_score'].median():.3f}")
    print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {df['pred_score'].std():.3f}")
    print(f"  –ú–∏–Ω–∏–º—É–º: {df['pred_score'].min():.3f}")
    print(f"  –ú–∞–∫—Å–∏–º—É–º: {df['pred_score'].max():.3f}")

    print("\n–û—Ü–µ–Ω–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞:")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ: {df['–û—Ü–µ–Ω–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞'].mean():.3f}")
    print(f"  –ú–µ–¥–∏–∞–Ω–∞: {df['–û—Ü–µ–Ω–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞'].median():.3f}")
    print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {df['–û—Ü–µ–Ω–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞'].std():.3f}")

    print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞:")
    —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ = df['–û—Ü–µ–Ω–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞'].value_counts().sort_index()
    for –æ—Ü–µ–Ω–∫–∞, count in —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.items():
        print(f"  {–æ—Ü–µ–Ω–∫–∞}: {count} –æ—Ç–≤–µ—Ç–æ–≤ ({count / len(df) * 100:.1f}%)")


def calculate_correlations(df):
    """–†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""

    print("\n" + "=" * 40)
    print("–ö–û–†–†–ï–õ–Ø–¶–ò–ò –ò –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø")
    print("=" * 40)

    correlation = df[['–û—Ü–µ–Ω–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞', 'pred_score']].corr().iloc[0, 1]
    print(f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –æ—Ü–µ–Ω–∫–∞–º–∏: {correlation:.3f}")

    df['—Ä–∞–∑–Ω–∏—Ü–∞'] = df['pred_score'] - df['–û—Ü–µ–Ω–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞']
    df['abs_—Ä–∞–∑–Ω–∏—Ü–∞'] = abs(df['—Ä–∞–∑–Ω–∏—Ü–∞'])

    print(f"–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {df['abs_—Ä–∞–∑–Ω–∏—Ü–∞'].mean():.3f}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {df['abs_—Ä–∞–∑–Ω–∏—Ü–∞'].max():.3f}")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {df['abs_—Ä–∞–∑–Ω–∏—Ü–∞'].min():.3f}")

    # –ê–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    print("\n–°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–¨ –û–¶–ï–ù–û–ö:")
    for –ø–æ—Ä–æ–≥ in [0.1, 0.3, 0.5, 1.0]:
        —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ = df[df['abs_—Ä–∞–∑–Ω–∏—Ü–∞'] < –ø–æ—Ä–æ–≥].shape[0]
        –ø—Ä–æ—Ü–µ–Ω—Ç = (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ / len(df)) * 100
        print(f"  –†–∞–∑–Ω–∏—Ü–∞ < {–ø–æ—Ä–æ–≥}: {—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ} –æ—Ç–≤–µ—Ç–æ–≤ ({–ø—Ä–æ—Ü–µ–Ω—Ç:.1f}%)")


def create_visualizations(df):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""

    print("\n" + "=" * 40)
    print("–°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–û–í")
    print("=" * 40)

    os.makedirs('graphs', exist_ok=True)

    # 1. Scatter plot
    plt.figure(figsize=(10, 6))
    scatter = plt.scatter(df['–û—Ü–µ–Ω–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞'], df['pred_score'],
                          c=df['abs_—Ä–∞–∑–Ω–∏—Ü–∞'], cmap='viridis', alpha=0.7, s=60)
    plt.colorbar(scatter, label='–ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞')
    plt.plot([0, 2], [0, 2], 'r--', alpha=0.5, label='–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ')
    plt.xlabel('–û—Ü–µ–Ω–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞')
    plt.ylabel('AI –æ—Ü–µ–Ω–∫–∞ (pred_score)')
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –∏ AI –æ—Ü–µ–Ω–∫–∏')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.savefig('graphs/test_scatter.png', dpi=300, bbox_inches='tight')
    plt.close()

    # 2. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–Ω–∏—Ü
    plt.figure(figsize=(10, 6))
    plt.hist(df['—Ä–∞–∑–Ω–∏—Ü–∞'], bins=15, alpha=0.7, edgecolor='black', color='skyblue')
    plt.xlabel('–†–∞–∑–Ω–∏—Ü–∞ (AI - –ß–µ–ª–æ–≤–µ–∫)')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤')
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü –æ—Ü–µ–Ω–æ–∫')
    plt.grid(True, alpha=0.3)
    plt.axvline(x=0, color='red', linestyle='--', alpha=0.8, label='–ù—É–ª–µ–≤–∞—è —Ä–∞–∑–Ω–∏—Ü–∞')
    plt.legend()
    plt.savefig('graphs/test_histogram.png', dpi=300, bbox_inches='tight')
    plt.close()

    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É 'graphs/'")


def analyze_explanations(df):
    """–ê–Ω–∞–ª–∏–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""

    print("\n" + "=" * 40)
    print("–ê–ù–ê–õ–ò–ó –û–ë–™–Ø–°–ù–ï–ù–ò–ô")
    print("=" * 40)

    –≤—Å–µ_–æ–±—ä—è—Å–Ω–µ–Ω–∏—è = ' '.join(df['–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ_–æ—Ü–µ–Ω–∫–∏'].dropna().astype(str))
    —Å–ª–æ–≤–∞ = [word.strip() for word in –≤—Å–µ_–æ–±—ä—è—Å–Ω–µ–Ω–∏—è.split() if len(word.strip()) > 2]
    —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å = Counter(—Å–ª–æ–≤–∞)

    print("–¢–æ–ø-10 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è—Ö:")
    for —Å–ª–æ–≤–æ, count in —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å.most_common(10):
        print(f"  {—Å–ª–æ–≤–æ}: {count}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    df = load_and_analyze_data()
    if df is None:
        return

    basic_statistics(df)
    calculate_correlations(df)
    create_visualizations(df)
    analyze_explanations(df)

    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–û–í–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 60)
    print("üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print("   ‚Ä¢ graphs/test_scatter.png")
    print("   ‚Ä¢ graphs/test_histogram.png")


if __name__ == "__main__":
    main()