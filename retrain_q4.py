import pandas as pd
import numpy as np
from catboost import CatBoostRegressor
import sys
import os

sys.path.append('src')

from features_q4 import enhanced_q4_features
from features import build_baseline_features
from semantic_features import add_semantic_similarity
from data_cleaning import prepare_dataframe


def retrain_q4_model():
    print("üîÑ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Q4 —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ñ–∏—á–∞–º–∏...")

    # 1. –ó–∞–≥—Ä—É–∑–∏ –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv('data/raw/–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–µ–π—Å–∞.csv', sep=';')
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")

    # 2. –ü–æ–¥–≥–æ—Ç–æ–≤—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è Q4
    df_clean = prepare_dataframe(df)
    df_q4 = df_clean[df_clean['question_number'] == 4]
    print(f"üìã Q4 –¥–∞–Ω–Ω—ã—Ö: {len(df_q4)} —Å—Ç—Ä–æ–∫")

    # 3. –ü–æ—Å—Ç—Ä–æ–π –≤—Å–µ —Ñ–∏—á–∏
    print("üî® –°—Ç—Ä–æ–∏–º —Ñ–∏—á–∏...")
    feats = build_baseline_features(df_q4)
    feats = add_semantic_similarity(feats, verbose=False)
    feats = enhanced_q4_features(feats)

    # 4. –í—ã–¥–µ–ª–∏ —Ñ–∏—á–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    feature_cols = [c for c in feats.columns if c.startswith('q4_') or c in [
        'semantic_sim', 'ans_len_words', 'ans_n_sents', 'ans_ttr',
        'ans_short_sent_rt', 'ans_punct_rt', 'q_len_words'
    ]]

    X = feats[feature_cols].fillna(0)
    y = feats['score'].fillna(0)

    print(f"üéØ –§–∏—á–µ–π: {len(feature_cols)}, –ü—Ä–∏–º–µ—Ä–æ–≤: {len(X)}")
    print(f"üìà –§–∏—á–∏: {feature_cols}")

    # 5. –û–±—É—á–∏ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
    print("ü§ñ –û–±—É—á–∞–µ–º CatBoost...")
    model = CatBoostRegressor(
        iterations=500,
        learning_rate=0.1,
        depth=6,
        verbose=100,
        random_state=42
    )

    model.fit(X, y)

    # 6. –°–æ—Ö—Ä–∞–Ω–∏ –º–æ–¥–µ–ª—å
    model.save_model('models/catboost_Q4_enhanced.cbm')
    print("‚úÖ –ú–æ–¥–µ–ª—å Q4 –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ñ–∏—á–∞–º–∏!")

    # 7. –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞–∂–Ω–æ—Å—Ç—å —Ñ–∏—á
    feature_importance = pd.DataFrame({
        'feature': feature_cols,
        'importance': model.get_feature_importance()
    }).sort_values('importance', ascending=False)

    print("\nüìä –í–∞–∂–Ω–æ—Å—Ç—å —Ñ–∏—á:")
    print(feature_importance.head(10))


if __name__ == "__main__":
    retrain_q4_model()